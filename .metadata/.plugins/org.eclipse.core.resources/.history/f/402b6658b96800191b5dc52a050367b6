package com.controller;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.model.Client;
import com.model.Utilisateur;
import com.model.Service.ClientServiceImpl;
import com.model.Service.IClientService;

@RestController
@CrossOrigin
@RequestMapping("/client")
public class ClientController {

	
	@Autowired
    IClientService clientService;

    public ClientController(ClientServiceImpl clientServiceImpl) {
        clientService = clientServiceImpl;
    }
	
    
//    @RequestMapping(value = "/createClient", method = RequestMethod.POST) //modif
//    public ResponseEntity<Client> createClient(@RequestBody Client client) {
//    		clientService.save(client);
//            return new ResponseEntity<Client>(client, HttpStatus.OK);
//    }
    

    
    @PostMapping(value = "/createClient")
    public Client createClient(@RequestBody Client client) {
            return this.clientService.save(client);
    }
    
    @PutMapping("/{id}")
	public Client updateClient(@RequestBody Client client, @PathVariable int id) {
		if(clientService.findById(id) == null) {
			return null;
		} else {
			return clientService.save(client);
		}
	}
    
//    @RequestMapping(value = "/updateClient/{id}", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
//    public ResponseEntity<Client> updateClient(@RequestBody Client client) {
//        clientService.update(client);
//        return new ResponseEntity<Client>(client, HttpStatus.OK);
//    }
    
    @DeleteMapping("/{id}")
	public void deleteClient(@PathVariable int id) {
		if(clientService.findById(id) != null) {
			clientService.delete(clientService.findById(id));
		}
	}
    
    @DeleteMapping("/{nom}")
	public void deleteClient(@PathVariable String nom) {
		if(clientService.findByNom(nom) != null) {
			clientService.delete(clientService.findByNom(nom));
		}
	}
    
//    @RequestMapping(value = "/deleteClient", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
//    public ResponseEntity<Client> deleteClient(@RequestBody Client client) {
//        clientService.delete(client);
//        return new ResponseEntity<Client>(client, HttpStatus.OK);
//    }
    
    
    
    @RequestMapping(value = "/all", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
    public List<Client> getAllClients() {
        return clientService.findAll();
}
    @GetMapping("/{id}")
    public Client findClientById (@RequestBody Client client, @PathVariable int id) {
        if(clientService.findById(id) == null) {
            return null;
        } else {
            return clientService.findById(id);
        }
    }
    
    @GetMapping("/{nom}")
    public Client findClientByNom (@RequestBody Client client, @PathVariable String nom) {
        if(clientService.findByNom(nom) == null) {
            return null;
        } else {
            return clientService.findByNom(nom);
        }
    }
}